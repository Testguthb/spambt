import logging
import sqlite3
import os
import asyncio
import time
from typing import Dict, Optional

from telethon import Button, TelegramClient
from telethon.sessions import StringSession
from telethon.tl.types import Channel, Chat
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest

from config import callback_query, API_ID, API_HASH, broadcast_all_text, scheduler, Query, bot, conn
from func.func import gid_key, broadcast_status_emoji, get_entity_by_id

# –ö–µ—à –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø (–≥—Ä—É–ø–ø–∞_id: {–Ω–∞–∑–≤–∞–Ω–∏–µ, –≤—Ä–µ–º—è_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è})
groups_cache: Dict[str, Dict] = {}
CACHE_EXPIRE_TIME = 300  # 5 –º–∏–Ω—É—Ç


def get_cached_group_title(group_username: str, group_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ"""
    cache_key = f"{group_username}_{group_id}"
    if cache_key in groups_cache:
        cached_data = groups_cache[cache_key]
        if time.time() - cached_data['timestamp'] < CACHE_EXPIRE_TIME:
            return cached_data['title']
    return None

def cache_group_title(group_username: str, group_id: int, title: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –∫–µ—à"""
    cache_key = f"{group_username}_{group_id}"
    groups_cache[cache_key] = {
        'title': title,
        'timestamp': time.time()
    }

def cleanup_cache():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞"""
    current_time = time.time()
    expired_keys = []
    
    for cache_key, cached_data in groups_cache.items():
        if current_time - cached_data['timestamp'] > CACHE_EXPIRE_TIME:
            expired_keys.append(cache_key)
    
    for key in expired_keys:
        del groups_cache[key]
    
    logging.info(f"–û—á–∏—â–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ –≥—Ä—É–ø–ø")

@bot.on(Query(data=lambda data: data.decode().startswith("listOfgroups_")))
async def handle_groups_list(event: callback_query) -> None:
    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    cleanup_cache()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    data_parts = event.data.decode().split("_")
    user_id = int(data_parts[1])
    page = int(data_parts[2]) if len(data_parts) > 2 else 0
    
    cursor = conn.cursor()
    row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    if not row:
        cursor.close()
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
    total_groups = cursor.execute("SELECT COUNT(*) FROM groups WHERE user_id = ?", (user_id,)).fetchone()[0]
    
    if total_groups == 0:
        cursor.close()
        await event.respond("–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
        return
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 10 –≥—Ä—É–ø–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    PAGE_SIZE = 10
    offset = page * PAGE_SIZE
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    dialogs = cursor.execute(
        "SELECT group_id, group_username FROM groups WHERE user_id = ? LIMIT ? OFFSET ?", 
        (user_id, PAGE_SIZE, offset)
    ).fetchall()
    
    cursor.close()
    
    buttons = []
    groups_with_api_calls = []  # –ì—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω—ã API –≤—ã–∑–æ–≤—ã
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    for group_id, group_username in dialogs:
        cached_title = get_cached_group_title(group_username, group_id)
        if cached_title:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            buttons.append(
                [Button.inline(f"{broadcast_status_emoji(user_id, int(group_id))} {cached_title}",
                            f"groupInfo_{user_id}_{gid_key(group_id)}".encode())]
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
            groups_with_api_calls.append((group_id, group_username))
            # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å username/ID
            buttons.append(
                [Button.inline(f"{broadcast_status_emoji(user_id, int(group_id))} {group_username}",
                            f"groupInfo_{user_id}_{gid_key(group_id)}".encode())]
            )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã –±–µ–∑ –∫–µ—à–∞, –¥–µ–ª–∞–µ–º API –≤—ã–∑–æ–≤—ã (–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
    if groups_with_api_calls and len(groups_with_api_calls) <= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º API –≤—ã–∑–æ–≤—ã
        client = None
        try:
            client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
            await client.connect()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø —Å API –≤—ã–∑–æ–≤–∞–º–∏
            for i, (group_id, group_username) in enumerate(groups_with_api_calls):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º entity —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    entity = None
                    try:
                        if group_username.startswith('@'):
                            entity = await asyncio.wait_for(client.get_entity(group_username), timeout=5.0)
                        else:
                            try:
                                group_id_int = int(group_username)
                                entity = await asyncio.wait_for(get_entity_by_id(client, group_id_int), timeout=5.0)
                            except ValueError:
                                entity = await asyncio.wait_for(client.get_entity(group_username), timeout=5.0)
                    except asyncio.TimeoutError:
                        logging.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}")
                        continue
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}: {e}")
                        continue
                    
                    if entity:
                        group_title = getattr(entity, 'title', group_username)
                        # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                        cache_group_title(group_username, group_id, group_title)
                        
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        button_index = None
                        for idx, button_row in enumerate(buttons):
                            if button_row[0].data.decode().endswith(f"_{gid_key(group_id)}"):
                                button_index = idx
                                break
                        
                        if button_index is not None:
                            buttons[button_index] = [Button.inline(
                                f"{broadcast_status_emoji(user_id, int(group_id))} {group_title}",
                                f"groupInfo_{user_id}_{gid_key(group_id)}".encode()
                            )]
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
                    continue
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {e}")
        finally:
            if client:
                try:
                    await client.disconnect()
                except:
                    pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    navigation_buttons = []
    total_pages = (total_groups + PAGE_SIZE - 1) // PAGE_SIZE
    
    if total_pages > 1:
        nav_row = []
        if page > 0:
            nav_row.append(Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"listOfgroups_{user_id}_{page-1}"))
        
        nav_row.append(Button.inline(f"üìÑ {page+1}/{total_pages}", "noop"))
        
        if page < total_pages - 1:
            nav_row.append(Button.inline("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", f"listOfgroups_{user_id}_{page+1}"))
        
        navigation_buttons.append(nav_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É"
    navigation_buttons.append([Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É", f"account_info_{user_id}")])
    
    buttons.extend(navigation_buttons)
    
    message_text = f"üìã **–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø** (—Å—Ç—Ä. {page+1}/{total_pages}):\n"
    if groups_with_api_calls and len(groups_with_api_calls) > 5:
        message_text += "\nüí° *–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ*"
    
    await event.respond(message_text, buttons=buttons)


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏-–∑–∞–≥–ª—É—à–∫–∏ (–ø–æ–∫–∞–∑ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
@bot.on(Query(data=b"noop"))
async def handle_noop(event: callback_query) -> None:
    await event.answer()


# ---------- –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ----------
@bot.on(Query(data=lambda d: d.decode().startswith("groupInfo_")))
async def group_info(event: callback_query) -> None:
    data = event.data.decode()
    user_id, group_id = map(int, data.split("_")[1:])
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
    session_row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    if not session_row:
        await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        cursor.close()
        return
        
    session_string = session_row[0]
    session = StringSession(session_string)
    client = TelegramClient(session, API_ID, API_HASH)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã
    group_row = cursor.execute("SELECT group_username FROM groups WHERE user_id = ? AND group_id = ?", 
                             (user_id, group_id)).fetchone()
    if not group_row:
        await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞.")
        cursor.close()
        return
        
    group_username = group_row[0]
    
    try:
        await client.connect()
        
        try:
            ent = await client.get_entity(group_row[0])
        except Exception as entity_error:
            if "Cannot find any entity corresponding to" in str(entity_error):
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º username –≤ ID, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    try:
                        group_id_int = int(group_row[0])
                        ent = await get_entity_by_id(client, group_id_int)
                        if not ent:
                            await event.respond(f"‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_username}.")
                            await client.disconnect()
                            cursor.close()
                            return
                    except ValueError:
                        # –ï—Å–ª–∏ username –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                        await event.respond(f"‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_username}.")
                        await client.disconnect()
                        cursor.close()
                        return
                except Exception as alt_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ Entity: {alt_error}")
                    await event.respond(f"‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_username}.")
                    await client.disconnect()
                    cursor.close()
                    return
            else:
                await event.respond(f"‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_username}.")
                await client.disconnect()
                cursor.close()
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        broadcast_row = cursor.execute("""
            SELECT broadcast_text, interval_minutes, is_active, photo_url 
            FROM broadcasts 
            WHERE user_id = ? AND group_id = ?
        """, (user_id, gid_key(group_id))).fetchone()
        
        broadcast_text = broadcast_row[0] if broadcast_row and broadcast_row[0] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        interval = f"{broadcast_row[1]} –º–∏–Ω." if broadcast_row and broadcast_row[1] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        status = broadcast_status_emoji(user_id, group_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo_url = broadcast_row[3] if broadcast_row and len(broadcast_row) > 3 and broadcast_row[3] else None
        photo_info = f"–§–æ—Ç–æ: {os.path.basename(photo_url)}" if photo_url else "–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_title = getattr(ent, 'title', group_username)
        group_username_display = f"@{ent.username}" if hasattr(ent, 'username') and ent.username else "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None
        members_count = getattr(ent, 'participants_count', None)
        if members_count is None:
            try:
                # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if isinstance(ent, Channel):
                    full_channel = await client(GetFullChannelRequest(ent))
                    members_count = getattr(full_channel.full_chat, 'participants_count', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                elif isinstance(ent, Chat):
                    full_chat = await client(GetFullChatRequest(ent.id))
                    members_count = getattr(full_chat.full_chat, 'participants_count', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                else:
                    members_count = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
                members_count = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        if isinstance(ent, Channel):
            group_type = "–ö–∞–Ω–∞–ª" if ent.broadcast else "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
        elif isinstance(ent, Chat):
            group_type = "–ì—Ä—É–ø–ø–∞"
        else:
            group_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        
        info_text = f"""
üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ**

üë• **–ù–∞–∑–≤–∞–Ω–∏–µ**: {group_title}
üîñ **–Æ–∑–µ—Ä–Ω–µ–π–º**: {group_username_display}
üë§ **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤**: {members_count}
üìù **–¢–∏–ø**: {group_type}
üÜî **ID**: {group_id}

üì¨ **–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏**: {status}
‚è± **–ò–Ω—Ç–µ—Ä–≤–∞–ª**: {interval}
üìù **–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏**: 
{broadcast_text[:100] + '...' if len(broadcast_text) > 100 else broadcast_text}
üñº **{photo_info}**
"""
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
        buttons = [
            [Button.inline(f"üìù –¢–µ–∫—Å—Ç –∏ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏", f"BroadcastTextInterval_{user_id}_{group_id}".encode())],
            [Button.inline(f"‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", f"StartResumeBroadcast_{user_id}_{group_id}".encode())],
            [Button.inline(f"‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", f"StopAccountBroadcast_{user_id}_{group_id}".encode())],
            [Button.inline(f"‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", f"DeleteGroup_{user_id}_{group_id}".encode())],
            [Button.inline(f"‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", f"groups_{user_id}".encode())]
        ]
        
        await event.respond(info_text, buttons=buttons)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {str(e)}")
    finally:
        await client.disconnect()
        cursor.close()
