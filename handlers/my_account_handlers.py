import logging

from telethon import Button, TelegramClient
from telethon.sessions import StringSession

from config import callback_query, API_ID, API_HASH, Query, bot, conn, processed_callbacks
from func.func import get_active_broadcast_groups, broadcast_status_emoji, get_entity_by_id


@bot.on(Query(data=b"my_accounts"))
async def my_accounts(event: callback_query) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    cursor = None
    try:
        cursor = conn.cursor()
        buttons = []
        accounts_found = False
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤
        import asyncio

        for user_id, session_string in cursor.execute("SELECT user_id, session_string FROM sessions"):
            accounts_found = True
            client = None
            try:
                client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
                await client.connect()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                me = await asyncio.wait_for(client.get_me(), timeout=10.0)
                username = me.first_name if me.first_name else "–ë–µ–∑ –Ω–∏–∫–∞"
                buttons.append([Button.inline(f"üë§ {username}", f"account_info_{user_id}")])
                
            except asyncio.TimeoutError:
                logging.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_id}")
                buttons.append([Button.inline(f"‚ö† –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (ID: {user_id})", f"account_info_{user_id}")])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_id}: {e}")
                buttons.append([Button.inline(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (ID: {user_id})", f"account_info_{user_id}")])
            finally:
                if client:
                    try:
                        await client.disconnect()
                    except:
                        pass

        if not accounts_found:
            await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return

        await event.respond("üì± **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:**", buttons=buttons)

    except Exception as e:
        logging.error(f"Error in my_accounts: {e}")
        await event.respond("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    finally:
        if cursor:
            cursor.close()


@bot.on(Query(data=lambda data: data.decode().startswith("account_info_")))
async def handle_account_button(event: callback_query) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ callback
    callback_id = f"{event.sender_id}:{event.query.msg_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if callback_id in processed_callbacks:
        # –≠—Ç–æ—Ç callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await event.answer("–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return
        
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processed_callbacks[callback_id] = True
        
    user_id = int(event.data.decode().split("_")[2])
    cursor = conn.cursor()
    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        cursor.close()
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = None
    try:
        client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
        await client.connect()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        import asyncio
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            me = await asyncio.wait_for(client.get_me(), timeout=10.0)
            username = me.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            phone = me.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        except asyncio.TimeoutError:
            await event.respond("‚ö† –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
            await event.respond("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π (–±—ã—Å—Ç—Ä–æ)
        groups_count = cursor.execute("SELECT COUNT(*) FROM groups WHERE user_id = ?", (user_id,)).fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        active_gids = get_active_broadcast_groups(user_id)
        mass_active = "üü¢ –í–ö–õ" if active_gids else "üî¥ –í–´–ö–õ"
        
        buttons = [
            [
                Button.inline("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", f"listOfgroups_{user_id}")
            ],
            [Button.inline("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ —á–∞—Ç—ã", f"broadcastAll_{user_id}"),
             Button.inline("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É", f"StopBroadcastAll_{user_id}")],
            [Button.inline("‚úî –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö", f"add_all_groups_{user_id}")],
            [Button.inline("‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç", f"delete_account_{user_id}")]
        ]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
        await event.respond(
            f"üì¢ **–ú–µ–Ω—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}:**\n"
            f"üöÄ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:** {mass_active}\n\n"
            f"üìå **–ò–º—è:** {username}\n"
            f"üìû **–ù–æ–º–µ—Ä:** `+{phone}`\n\n"
            f"üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø:** {groups_count}\n"
            f"üí° *–ù–∞–∂–º–∏—Ç–µ \"üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø\" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏*",
            buttons=buttons
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_account_button: {e}")
        await event.respond("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞.")
    finally:
        if client:
            try:
                await client.disconnect()
            except:
                pass
        cursor.close()
