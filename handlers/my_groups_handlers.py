import logging
from typing import List, Optional, Union

from telethon import Button, TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Channel, Chat, DialogFilter

from config import callback_query, API_ID, API_HASH, Query, bot, conn, processed_callbacks
from func.func import broadcast_status_emoji, gid_key, get_entity_by_id


@bot.on(Query(data=lambda d: d.decode().startswith("account_")))
async def account_menu(event: callback_query) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞."""
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ callback
    callback_id = f"{event.sender_id}:{event.query.msg_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if callback_id in processed_callbacks:
        # –≠—Ç–æ—Ç callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await event.answer("–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return
        
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processed_callbacks[callback_id] = True
    
    data = event.data.decode()
    parts = data.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    if len(parts) < 2:
        await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "info" –≤ callback data
    if parts[1] == "info":
        # –§–æ—Ä–º–∞—Ç account_info_user_id
        if len(parts) < 3:
            await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        try:
            user_id = int(parts[2])
        except ValueError:
            await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
    else:
        # –§–æ—Ä–º–∞—Ç account_user_id
        try:
            user_id = int(parts[1])
        except ValueError:
            await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    buttons = [
        [Button.inline("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", f"groups_{user_id}".encode())],
        [Button.inline("üì¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã", f"broadcastAll_{user_id}".encode())],
        [Button.inline("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É", f"StopBroadcastAll_{user_id}".encode())],
        [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"my_accounts")]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    await event.respond(f"üì± **–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=buttons)


@bot.on(Query(data=b"my_groups"))
async def my_groups(event: callback_query) -> None:
    cursor = conn.cursor()
    cursor.execute("SELECT group_id, group_username FROM groups")
    groups = cursor.fetchall()
    cursor.close()
    message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø."
    buttons = []
    if groups:
        message = "üìë **–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:**\n"
        buttons[0].append(Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã", b"add_all_accounts_to_groups"))
        buttons.append([Button.inline("‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", b"delete_group")])
        for group in groups:
            message += f"{group[1]}\n"
    await event.respond(message, buttons=buttons)


@bot.on(Query(data=b"add_all_accounts_to_groups"))
async def add_all_accounts_to_groups(event: callback_query) -> None:
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, session_string FROM sessions")
    accounts = cursor.fetchall()

    cursor.execute("SELECT group_id, group_username FROM groups")
    groups = cursor.fetchall()
    if not accounts:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    if not groups:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return

    for account in accounts:
        session = StringSession(account[1])
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()
        try:
            for group in groups:
                try:
                    await client(JoinChannelRequest(group[1]))
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ {e}")
                cursor.execute("""INSERT OR IGNORE INTO groups 
                                        (user_id, group_id, group_username) 
                                        VALUES (?, ?, ?)""", (account[0], group[0], group[1]))
                logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—É ({account[0], group[0], group[1]})")
        except Exception as e:
            await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        finally:
            await client.disconnect()
    group_list = "\n".join([f"üìå {group[1]}" for group in groups])
    await event.respond(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:\n{group_list}")
    conn.commit()
    cursor.close()


@bot.on(Query(data=lambda event: event.decode().startswith("add_all_groups_")))
async def add_all_accounts_to_groups(event: callback_query) -> None:
    import asyncio
    
    data: str = event.data.decode()
    user_id = int(data.split("_")[3])
    cursor = conn.cursor()
    cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id, ))
    accounts = cursor.fetchall()
    if not accounts:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    progress_msg = await event.respond("üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö...**\n\n‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É...")
    
    session = StringSession(accounts[0][0])
    client = TelegramClient(session, API_ID, API_HASH)
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await asyncio.wait_for(client.connect(), timeout=15.0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await progress_msg.edit("üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö...**\n\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä—É–ø–ø—ã
        cursor.execute("DELETE FROM groups WHERE user_id = ?", (user_id,))
        conn.commit()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–Ω–æ–∂–∏–Ω–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≥—Ä—É–ø
        added_group_ids = set()
        added_group_names = set()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            all_dialogs = await asyncio.wait_for(client.get_dialogs(), timeout=30.0)
        except asyncio.TimeoutError:
            await progress_msg.edit("‚ö†Ô∏è **–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
        valid_groups = []
        for dialog in all_dialogs:
            ent = dialog.entity
            if isinstance(ent, (Channel, Chat)):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã
                if hasattr(ent, 'bot') and ent.bot:
                    continue
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã-–≤–∏—Ç—Ä–∏–Ω—ã (–Ω–µ –º–µ–≥–∞–≥—Ä—É–ø–ø—ã)
                if isinstance(ent, Channel) and ent.broadcast and not ent.megagroup:
                    continue
                valid_groups.append(dialog)
        
        total_groups = len(valid_groups)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await progress_msg.edit(f"üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö...**\n\nüìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {total_groups}\n‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
        sorted_dialogs = sorted(valid_groups, key=lambda d: (
            not isinstance(d.entity, Channel),
            not (isinstance(d.entity, Channel) and d.entity.username),
            d.name
        ))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –±–∞—Ç—á–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        batch_size = 50  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 50 –≥—Ä—É–ø–ø –∑–∞ —Ä–∞–∑
        processed_count = 0
        groups_to_insert = []  # –î–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ INSERT –æ–ø–µ—Ä–∞—Ü–∏–π
        
        for i, group in enumerate(sorted_dialogs):
            ent = group.entity
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if ent.id in added_group_ids or group.name in added_group_names:
                continue
                
            added_group_ids.add(ent.id)
            added_group_names.add(group.name)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            if isinstance(ent, Channel) and ent.username:
                group_username = f"@{ent.username}"
            else:
                group_username = str(ent.id)
            
            groups_to_insert.append((ent.id, group_username, user_id))
            processed_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –≥—Ä—É–ø–ø –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
            if (i + 1) % 25 == 0 or i == len(sorted_dialogs) - 1:
                progress_percent = int((i + 1) / len(sorted_dialogs) * 100)
                await progress_msg.edit(
                    f"üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö...**\n\n"
                    f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {total_groups}\n"
                    f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{len(sorted_dialogs)} ({progress_percent}%)\n"
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {processed_count}"
                )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á INSERT –∫–∞–∂–¥—ã–µ 50 –≥—Ä—É–ø–ø –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
            if len(groups_to_insert) >= batch_size or i == len(sorted_dialogs) - 1:
                if groups_to_insert:
                    cursor.executemany(
                        "INSERT INTO groups (group_id, group_username, user_id) VALUES (?, ?, ?)",
                        groups_to_insert
                    )
                    conn.commit()
                    groups_to_insert = []
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await progress_msg.edit(
            f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(all_dialogs)}\n"
            f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤: {total_groups}\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {processed_count}\n\n"
            f"üí° *–ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö*"
        )
        
    except asyncio.TimeoutError:
        await progress_msg.edit("‚ö†Ô∏è **–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏**\n\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
        await progress_msg.edit(f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø**\n\n`{str(e)}`")
    finally:
        cursor.close()
        if client.is_connected():
            await client.disconnect()


@bot.on(Query(data=lambda d: d.decode().startswith("groups_")))
async def groups_list(event: callback_query) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    import asyncio
    
    data = event.data.decode()
    user_id = int(data.split("_")[1])
    
    cursor = conn.cursor()
    session_row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    
    if not session_row:
        await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        cursor.close()
        return
        
    session_string = session_row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    progress_msg = None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –ë–î
        cursor.execute("SELECT group_id, group_username FROM groups WHERE user_id = ?", (user_id,))
        groups = cursor.fetchall()
        
        if not groups:
            await event.respond("üìã –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            cursor.close()
            return
        
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if len(groups) > 50:
            progress_msg = await event.respond(f"üìã **–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...**\n\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(groups)} –≥—Ä—É–ø–ø...")
        
        await asyncio.wait_for(client.connect(), timeout=15.0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        group_list = []
        processed = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        for i, (group_id, group_username) in enumerate(groups):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –≥—Ä—É–ø–ø—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                ent = None
                try:
                    ent = await asyncio.wait_for(client.get_entity(group_username), timeout=5.0)
                except (asyncio.TimeoutError, Exception) as entity_error:
                    if "Cannot find any entity corresponding to" in str(entity_error) or isinstance(entity_error, asyncio.TimeoutError):
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º username –≤ ID, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                            try:
                                group_id_int = int(group_username)
                                ent = await asyncio.wait_for(get_entity_by_id(client, group_id_int), timeout=5.0)
                            except (ValueError, asyncio.TimeoutError):
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                                ent = None
                        except Exception as alt_error:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ Entity: {alt_error}")
                            ent = None
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}: {entity_error}")
                        ent = None
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
                status = broadcast_status_emoji(user_id, group_id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if ent:
                    group_name = getattr(ent, 'title', group_username)
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ ID
                    group_name = group_username if not group_username.isdigit() else f"–ì—Ä—É–ø–ø–∞ ID: {group_username}"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º gid_key –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –≥—Ä—É–ø–ø—ã
                group_list.append((gid_key(group_id), group_name, status))
                processed += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –≥—Ä—É–ø–ø
                if progress_msg and (i + 1) % 25 == 0:
                    progress_percent = int((i + 1) / len(groups) * 100)
                    await progress_msg.edit(
                        f"üìã **–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...**\n\n"
                        f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{len(groups)} ({progress_percent}%)\n"
                        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {processed} –≥—Ä—É–ø–ø"
                    )
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_username}: {e}")
                continue
                
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
        if group_list:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            max_buttons = 100  # –ú–∞–∫—Å–∏–º—É–º 100 –∫–Ω–æ–ø–æ–∫ –∑–∞ —Ä–∞–∑
            
            if len(group_list) > max_buttons:
                # –ï—Å–ª–∏ –≥—Ä—É–ø–ø —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ N –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                displayed_groups = group_list[:max_buttons]
                pagination_info = f"\n\nüìÑ *–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö {max_buttons} –∏–∑ {len(group_list)} –≥—Ä—É–ø–ø*"
            else:
                displayed_groups = group_list
                pagination_info = ""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            buttons = []
            for group_id, group_name, status in displayed_groups:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
                display_name = group_name[:50] + "..." if len(group_name) > 50 else group_name
                data = f"groupInfo_{user_id}_{group_id}".encode()
                buttons.append([Button.inline(f"{status} {display_name}", data)])
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            buttons.append([Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"account_{user_id}".encode())])
            
            message = f"üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø:** ({len(group_list)} –≥—Ä—É–ø–ø){pagination_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
            
            if progress_msg:
                await progress_msg.edit(message, buttons=buttons)
            else:
                await event.respond(message, buttons=buttons)
        else:
            error_msg = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
            if progress_msg:
                await progress_msg.edit(error_msg)
            else:
                await event.respond(error_msg)
            
    except asyncio.TimeoutError:
        error_msg = "‚ö†Ô∏è **–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø**\n\n–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if progress_msg:
            await progress_msg.edit(error_msg)
        else:
            await event.respond(error_msg)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        error_msg = f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {str(e)}"
        if progress_msg:
            await progress_msg.edit(error_msg)
        else:
            await event.respond(error_msg)
    finally:
        if client.is_connected():
            await client.disconnect()
        cursor.close()
