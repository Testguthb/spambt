import logging
import sqlite3
import os
import sys
from typing import Dict, Tuple, List, Optional

import telethon.events
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from decouple import config
from telethon import TelegramClient

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é bot1)
BOT_INSTANCE = os.getenv('BOT_INSTANCE', 'bot1')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
if BOT_INSTANCE == 'bot2':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot2'))
elif BOT_INSTANCE == 'bot3':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot3'))
elif BOT_INSTANCE == 'bot4':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot4'))
elif BOT_INSTANCE == 'bot5':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot5'))
elif BOT_INSTANCE == 'bot6':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot6'))
elif BOT_INSTANCE == 'bot7':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot7'))
elif BOT_INSTANCE == 'bot8':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot8'))
elif BOT_INSTANCE == 'bot9':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot9'))
elif BOT_INSTANCE == 'bot10':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot10'))
elif BOT_INSTANCE == 'bot11':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot11'))
elif BOT_INSTANCE == 'bot12':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot12'))
elif BOT_INSTANCE == 'bot13':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot13'))
elif BOT_INSTANCE == 'bot14':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot14'))
elif BOT_INSTANCE == 'bot15':
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot15'))
else:
    from decouple import Config, RepositoryEnv
    env_config = Config(RepositoryEnv('.env.bot1'))

# –ö–æ–Ω—Ñ–∏–≥
API_ID: int = int(env_config("API_ID"))
API_HASH: str = env_config("API_HASH")
BOT_TOKEN: str = env_config("BOT_TOKEN")
ADMIN_ID_LIST: List[int] = list(map(int, map(str.strip, env_config("ADMIN_ID_LIST").split(","))))  # <-- –í—Å—Ç–∞–≤–∏—Ç—å ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
DATABASE_NAME: str = env_config("DATABASE_NAME", default="sessions.db")
BOT_NAME: str = env_config("BOT_NAME", default="bot")

# –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞ –≤–∫–ª—é—á–∞—è –Ω–æ–º–µ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
bot: TelegramClient = TelegramClient(f"{BOT_NAME}_session", API_ID, API_HASH)
conn: sqlite3.Connection = sqlite3.connect(DATABASE_NAME, timeout=30.0, check_same_thread=False)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FORMAT: str = f"[{BOT_NAME}] %(asctime)s - %(name)s - %(levelname)s - %(message)s"
LOG_LEVEL: logging.INFO = logging.INFO
LOG_FILE: Optional[str] = f"{BOT_NAME}_log.log"  # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
LOG_ENCODING: str = "utf-8"

# –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
New_Message = telethon.events.NewMessage
Query = telethon.events.CallbackQuery
callback_query = Query.Event
callback_message = New_Message.Event
__Dict_int_str = Dict[int, str]
__Dict_all_str = Dict[str, str]
__Dict_int_dict = Dict[int, dict]


phone_waiting: Dict[int, bool] = {}  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞

code_waiting: __Dict_int_str = {}
broadcast_all_text: __Dict_int_str = {}
user_states: __Dict_int_str = {}

password_waiting: __Dict_int_dict = {}
broadcast_all_state: __Dict_int_dict = {}
broadcast_solo_state: __Dict_int_dict = {}
broadcast_all_state_account: __Dict_int_dict = {}
user_sessions: __Dict_int_dict = {}

user_sessions_deleting: Dict[int, __Dict_all_str] = {}
user_sessions_phone: Dict[Tuple[int, int], __Dict_all_str] = {}

user_clients: Dict[int, TelegramClient] = {}
scheduler: AsyncIOScheduler = AsyncIOScheduler()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
processed_callbacks: Dict[str, bool] = {}

# –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
print(f"ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {BOT_NAME}")
print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_NAME}")
print(f"üîë API_ID: {API_ID}")
