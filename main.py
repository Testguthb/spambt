import logging
import os
from handlers import *
from config import (BOT_TOKEN, LOG_LEVEL, LOG_FORMAT, LOG_FILE, LOG_ENCODING, conn, bot, API_ID, API_HASH, user_clients, scheduler, BOT_NAME, DATABASE_NAME)
from func.db_func import create_table, delete_table
from func.func import is_night_time
from telethon import TelegramClient
from telethon.sessions import StringSession

# –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è ERROR —ñ –≤–∏—â–µ
logging.basicConfig(level=logging.ERROR)
# –∞–±–æ
logger = logging.getLogger()
logger.setLevel(logging.ERROR)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def load_sessions():
    cursor = conn.cursor()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sessions = cursor.execute("SELECT user_id, session_string FROM sessions").fetchall()
        logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é {len(sessions)} —Å–µ—Å—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {BOT_NAME}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–æ—Ç–¥–µ–ª—å–Ω—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞)
        sessions_dir = f".sessions_{BOT_NAME}"
        os.makedirs(sessions_dir, exist_ok=True)
        
        for user_id, session_string in sessions:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                session_file = f"{sessions_dir}/user_{user_id}.session"
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å StringSession –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª
                client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
                await client.connect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if await client.is_user_authorized():
                    logging.info(f"[{BOT_NAME}] –°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                else:
                    logging.warning(f"[{BOT_NAME}] –°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                await client.disconnect()
            except Exception as e:
                logging.error(f"[{BOT_NAME}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    except Exception as e:
        logging.error(f"[{BOT_NAME}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–π: {e}")
    finally:
        cursor.close()

pause_state = {"is_paused": False} 

async def check_and_manage_pause():
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏ —Å—Ç–∞–≤–∏—Ç –Ω–∞ –ø–∞—É–∑—É –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç
    –≤—Å–µ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    now_is_night = is_night_time()

    if now_is_night and not pause_state["is_paused"]:
        logging.warning("–ù–∞—Å—Ç–∞–ª–∞ –Ω–æ—á—å. –°—Ç–∞–≤–ª—é –Ω–∞ –ø–∞—É–∑—É –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        for job in scheduler.get_jobs():
            if job.id.startswith("broadcast"):
                scheduler.pause_job(job.id)
        pause_state["is_paused"] = True

    elif not now_is_night and pause_state["is_paused"]:
        logging.warning("–ù–∞—Å—Ç–∞–ª–æ —É—Ç—Ä–æ. –í–æ–∑–æ–±–Ω–æ–≤–ª—è—é –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        for job in scheduler.get_jobs():
            if job.id.startswith("broadcast"):
                scheduler.resume_job(job.id)
        pause_state["is_paused"] = False

if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {BOT_NAME}...")
    print(f"üìä –ò—Å–ø–æ–ª—å–∑—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {DATABASE_NAME}")
    
    create_table()
    delete_table()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à—É –∑–∞–¥–∞—á—É-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    async def main():
        
        await bot.start(bot_token=BOT_TOKEN)
        
        scheduler.add_job(check_and_manage_pause, 'interval', minutes=1, id='pause_controller')

        if not scheduler.running:
            scheduler.start()
        
        await load_sessions()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—à—å –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        logging.info(f"üöÄ [{BOT_NAME}] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        
        await bot.run_until_disconnected()
    
    bot.loop.run_until_complete(main())
